{"availableCount":79,"searchTerms":[],"userState":"265f4149-fbe0-4d57-88d7-3a8986cb03b3","resources":[{"supportDocuments":[],"description":"Contains a comprehensive reference for the APIs of Silicon Labs Gecko Bootloader, including the Gecko Bootloader Application Interface used to interface with the bootloader from a running application, as well as the APIs used to implement bootloader functionality.","id":"https://docs.silabs.com/mcu-bootloader/latest/","text":"Gecko Bootloader API Reference Guide","priority":1,"category":"DOCUMENTATION","toolTipText":"Contains a comprehensive reference for the APIs of Silicon Labs Gecko Bootloader, including the Gecko Bootloader Application Interface used to interface with the bootloader from a running application, as well as the APIs used to implement bootloader functionality."},{"supportDocuments":[],"description":"API Reference for Micrium OS Kernel","id":"https://docs.silabs.com/micrium/latest/micrium-kernel-api/","text":"Kernel API Reference","priority":1,"category":"DOCUMENTATION","toolTipText":"API Reference for Micrium OS Kernel"},{"supportDocuments":[],"description":"API Reference for Micrium OS CPU","id":"https://docs.silabs.com/micrium/latest/micrium-cpu-api/","text":"CPU API Reference","priority":2,"category":"DOCUMENTATION","toolTipText":"API Reference for Micrium OS CPU"},{"supportDocuments":[],"description":"Description of general concepts that are used throughout Micrium OS products","id":"https://docs.silabs.com/micrium/latest/micrium-general-concepts/","text":"General Concepts","priority":2,"category":"DOCUMENTATION","toolTipText":"Description of general concepts that are used throughout Micrium OS products"},{"supportDocuments":[],"description":"API Reference for Micrium OS Common","id":"https://docs.silabs.com/micrium/latest/micrium-common-api/","text":"Common API Reference","priority":3,"category":"DOCUMENTATION","toolTipText":"API Reference for Micrium OS Common"},{"supportDocuments":[],"description":"API Reference for Micrium OS IO","id":"https://docs.silabs.com/micrium/latest/micrium-io-api/","text":"IO API Reference","priority":4,"category":"DOCUMENTATION","toolTipText":"API Reference for Micrium OS IO"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/data-sheets/efm32pg12-datasheet.pdf","text":"EFM32PG12 Family Data Sheet","priority":10,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/reference-manuals/efm32pg12-rm.pdf","text":"EFM32PG12 Wireless Gecko Family Reference Manual","priority":10,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"This application note details hardware design considerations for EFM32 and EFR32 Wireless Gecko Series 1 devices. For hardware design considerations for EFM32 and EZR32 Wireless MCU Series 0 devices, refer to AN0002.0: EFM32 and EZR32 Wireless MCU Series 0 Hardware Design Considerations Topics specifically covered are supported power supply configurations, supply filtering considerations, debug interface connections, and external clock sources. For more information on hardware design and layout considerations for the DC-DC converter on EFM32 and EFR32 Wireless Gecko Series 1 devices, see AN0948: Power Configurations and DC-DC. For more information on hardware layout considerations for the radio portion of EFR32 Wireless Gecko Series 1 devices, see AN930: EFR32 2.4 GHz Matching Guide, AN933: EFR32 2.4 GHz Minimal BOM, and AN928: EFR32 Layout Design Guide.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0002.1-efr32-efm32-series-1-hardware-design-considerations.pdf","text":"AN0002.1: EFM32 and EFR32 Wireless Gecko Series 1 Hardware Design Considerations","priority":10,"category":"APP_NOTES","toolTipText":"This application note details hardware design considerations for EFM32 and EFR32 Wireless Gecko Series 1 devices. For hardware design considerations for EFM32 and EZR32 Wireless MCU Series 0 devices, refer to AN0002.0: EFM32 and EZR32 Wireless MCU Series 0 Hardware Design Considerations Topics specifically covered are supported power supply configurations, supply filtering considerations, debug interface connections, and external clock sources. For more information on hardware design and layout considerations for the DC-DC converter on EFM32 and EFR32 Wireless Gecko Series 1 devices, see AN0948: Power Configurations and DC-DC. For more information on hardware layout considerations for the radio portion of EFR32 Wireless Gecko Series 1 devices, see AN930: EFR32 2.4 GHz Matching Guide, AN933: EFR32 2.4 GHz Minimal BOM, and AN928: EFR32 Layout Design Guide."},{"supportDocuments":[],"description":"EFM32PG12 Errata","id":"asset://aem/www.silabs.com/documents/public/errata/efm32pg12-errata.pdf","text":"EFM32PG12 Errata","priority":10,"category":"DOCUMENTATION","toolTipText":"EFM32PG12 Errata"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/user-guides/ug291-exp4320a-user-guide.pdf","text":"UG291: WGM110 Wi-Fi Expansion Kit","priority":15,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Explains how NVM3 can be used as non-volatile data storage in various protocol implementations.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1135-using-third-generation-nonvolatile-memory.pdf","text":"AN1135: Using Third Generation Non-Volatile Memory (NVM3) Data Storage","priority":20,"category":"APP_NOTES","toolTipText":"Explains how NVM3 can be used as non-volatile data storage in various protocol implementations."},{"supportDocuments":[],"description":"Introduces non-volatile data storage using flash and the three different storage implementations offered for Silicon Labs microcontrollers and SoCs: Simulated EEPROM, PS Store, and NVM3.","id":"asset://aem/www.silabs.com/documents/public/user-guides/ug103-07-non-volatile-data-storage-fundamentals.pdf","text":"UG103.07: Non-Volatile Data Storage Fundamentals","priority":20,"category":"DOCUMENTATION","toolTipText":"Introduces non-volatile data storage using flash and the three different storage implementations offered for Silicon Labs microcontrollers and SoCs: Simulated EEPROM, PS Store, and NVM3."},{"supportDocuments":[],"description":"Describes general theory of operational amplifiers (opamps) and explains how to use the MCU Series 1 and Wireless SoC Series 1 opamps. Useful code examples and explanations of the theory behind them are presented.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0038.1-efm32-series-1-operational-amplifiers.pdf","text":"AN0038.1: Operational Amplifiers (OPAMP) for Series 1 Parts","priority":20,"category":"APP_NOTES","toolTipText":"Describes general theory of operational amplifiers (opamps) and explains how to use the MCU Series 1 and Wireless SoC Series 1 opamps. Useful code examples and explanations of the theory behind them are presented."},{"supportDocuments":[],"description":"Describes Watchdog Module use in EFM32 and EFR32 Series 1 Devices.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0015.1-efr32-efm32-series-1-watchdog.pdf","text":"AN0015.1: EFM32 and EFR32 Series 1 Watchdog","priority":20,"category":"APP_NOTES","toolTipText":"Describes Watchdog Module use in EFM32 and EFR32 Series 1 Devices."},{"supportDocuments":[],"description":"Best practices for project collaboration with Simplicity Studio. Covers collaboration on Simplicity Studio projects through source control; importing received Studio projects, and exporting and sharing Studio projects.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1160-project-collaboration-with-simplicity-studio.pdf","text":"AN1160: Project Collaboration with Simplicity Studio","priority":30,"category":"APP_NOTES","toolTipText":"Best practices for project collaboration with Simplicity Studio. Covers collaboration on Simplicity Studio projects through source control; importing received Studio projects, and exporting and sharing Studio projects."},{"supportDocuments":[],"description":"Implementing hardware or software flow control for UART. Example code and multiple IDE projects are presented.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0059.1-uart-flow-control.pdf","text":"AN0059.1 UART Flow Control","priority":30,"category":"APP_NOTES","toolTipText":"Implementing hardware or software flow control for UART. Example code and multiple IDE projects are presented."},{"supportDocuments":[],"description":"Describes how to integrate crypto functionality into applications using PSA Crypto compared to Mbed TLS.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1311-mbedtls-psa-crypto-porting-guide.pdf","text":"AN1311: Integrating Crypto Functionality Using PSA Crypto Compared to Mbed TLS","priority":999,"category":"APP_NOTES","toolTipText":"Describes how to integrate crypto functionality into applications using PSA Crypto compared to Mbed TLS."},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/schematic-files/BRD2501A-A01-schematic.pdf","text":"BRD2501A Rev. A01 Schematic (PDF)","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/schematic-files/BRD2501A-hw-design-pkg.zip","text":"BRD2501A Hardware Design Package (ZIP)","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1245-efp01-configuration-tool-guide.pdf","text":"AN1245: EFP01 Configuration Tool Guide","priority":999,"category":"APP_NOTES","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"This application note describes the configuration, calibration, and operation of the Coulomb counter on the EFP01 Energy Friendly Power Management IC (PMIC).","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1188-efp01-coulomb-counting.pdf","text":"AN1188: EFP01 Coulomb Counting","priority":999,"category":"APP_NOTES","toolTipText":"This application note describes the configuration, calibration, and operation of the Coulomb counter on the EFP01 Energy Friendly Power Management IC (PMIC)."},{"supportDocuments":[],"description":"This application note provides an overview and the theory of op-eration for the EFP01 Energy Friendly Power Management IC (PMIC).","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1187-efp01-design-considerations.pdf","text":"AN1187: EFP01 Design Considerations","priority":999,"category":"APP_NOTES","toolTipText":"This application note provides an overview and the theory of op-eration for the EFP01 Energy Friendly Power Management IC (PMIC)."},{"supportDocuments":[],"description":"This application note explains the process for ordering customparts through the Custom Part Manufacturing Service (CPMS). Instructionsfor customizing device identity security certificates andwrapping custom keys are also included.","id":"asset://aem/www.silabs.com/documents/public/user-guides/ug519-cpms-user-guide.pdf","text":"UG519: CPMS User's Guide","priority":999,"category":"DOCUMENTATION","toolTipText":"This application note explains the process for ordering customparts through the Custom Part Manufacturing Service (CPMS). Instructionsfor customizing device identity security certificates andwrapping custom keys are also included."},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/miscellaneous/um006-energy-modes.pdf","text":"UM006: Lesson 6 - EFM32 Energy Modes","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/user-guides/biometric-exp-evb.pdf","text":"Biometric EXP Evaluation Board User\u2019s Guide","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Details on DALI Communication using the EFR32. Implementing Digital Addressable Lighting Interface (DALI) timing, packet formats, and Manchester encoding/decoding with minimum overhead on Wireless SoC Series 1 and Series 2 core. Supports DALI master and slave; Manchester encoding and decoding; option to use DMADRV, and contains software examples.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1220-efr32-dali.pdf","text":"AN1220: DALI Communication Using the EFR32","priority":999,"category":"APP_NOTES","toolTipText":"Details on DALI Communication using the EFR32. Implementing Digital Addressable Lighting Interface (DALI) timing, packet formats, and Manchester encoding/decoding with minimum overhead on Wireless SoC Series 1 and Series 2 core. Supports DALI master and slave; Manchester encoding and decoding; option to use DMADRV, and contains software examples."},{"supportDocuments":[],"description":"Describes optimization of embedded systems for low power consumption through balancing performance and power usage while preserving product function and reliability.","id":"asset://aem/www.silabs.com/documents/public/white-papers/power-efficiency-in-embedded-systems.pdf","text":"Balancing Performance and Power Efficiency in Embedded Systems","priority":999,"category":"DOCUMENTATION","toolTipText":"Describes optimization of embedded systems for low power consumption through balancing performance and power usage while preserving product function and reliability."},{"supportDocuments":[],"description":"Helps designers choose the best ARM Cortex core processor for their application.","id":"asset://aem/www.silabs.com/documents/public/white-papers/Which-ARM-Cortex-Core-Is-Right-for-Your-Application.pdf","text":"Which ARM Cortex Core Is Right for Your Application","priority":999,"category":"DOCUMENTATION","toolTipText":"Helps designers choose the best ARM Cortex core processor for their application."},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/referenced/white-papers/manage-the-iot-on-an-energy-budget.pdf","text":"Manage The IoT on an Energy Budget","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/referenced/white-papers/designing-sensors-into-battery-powered-iot-nodes.pdf","text":"Designing Sensors into Battery Powered IoT Nodes","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/referenced/white-papers/choosing-the-right-software-framework-for-your-design.pdf","text":"Choosing the Right Software Framework for Your Design","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/implementing-low-power-graphical-displays.pdf","text":"Implementing Low Power Graphical User Interfaces with 32-bit Microcontrollers","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/picking-the-right-microcontroller-based-on-low-power-specs.pdf","text":"How to Pick the Right Microcontroller Based on Low-Power Specifications","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/Selecting-the-Optimal-Battery-WP.pdf","text":"Selecting the Optimal Battery for your Embedded Application","priority":999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Describes how to initialize and customize peripherals for 32-bit devices, both in the Simplicity IDE and using the standalone Hardware Configurator tool.. Does not apply to the Bluetooth SDK or the 32-bit MCU SDK.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1115-32-bit-device-peripheral-configuration-in-simplicity-studio.pdf","text":"AN1115: Configuring Peripherals for 32-Bit Devices using Hardware Configurator","priority":9999999,"category":"APP_NOTES","toolTipText":"Describes how to initialize and customize peripherals for 32-bit devices, both in the Simplicity IDE and using the standalone Hardware Configurator tool.. Does not apply to the Bluetooth SDK or the 32-bit MCU SDK."},{"supportDocuments":[],"description":"This porting guide is targeted at migrating an existing design from Series 1 to Wireless Gecko Series 2. Both hardware and software migration needs to be considered.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0918.2-efm32-to-efr32xg2x-migration-guide.pdf","text":"AN0918.2: Gecko Series 1 to Series 2 Compatibility and Migration Guide","priority":9999999,"category":"APP_NOTES","toolTipText":"This porting guide is targeted at migrating an existing design from Series 1 to Wireless Gecko Series 2. Both hardware and software migration needs to be considered."},{"supportDocuments":[],"description":"This application note is intended for users of the EFM32 UART bootloaders. The bootloader enables users to program the EFM32 Series 0, EZR32 Series 0, and EFM32 Series 1 devices through a UART without the need for a debugger.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0003-efm32-uart-bootloader.pdf","text":"AN0003: UART Bootloader","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note is intended for users of the EFM32 UART bootloaders. The bootloader enables users to program the EFM32 Series 0, EZR32 Series 0, and EFM32 Series 1 devices through a UART without the need for a debugger."},{"supportDocuments":[],"description":"Introduces bootloading for Silicon Labs networking devices. Discusses the Gecko Bootloader and describes the file formats used by each.","id":"asset://aem/www.silabs.com/documents/public/user-guides/ug103-06-fundamentals-bootloading.pdf","text":"UG103.6: Bootloader Fundamentals","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Introduces bootloading for Silicon Labs networking devices. Discusses the Gecko Bootloader and describes the file formats used by each."},{"supportDocuments":[],"description":"This porting guide is targeted at migrating an existing design from MCU Series 0 to EFM32GG11. Both hardware and software migration needs to be considered.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0918.1-efm32-to-efm32gg1xtg11-migration-guide.pdf","text":"AN0918.1: MCU Series 0 to EFM32GG1x/TG11 Compatibility and Migration Guide","priority":9999999,"category":"APP_NOTES","toolTipText":"This porting guide is targeted at migrating an existing design from MCU Series 0 to EFM32GG11. Both hardware and software migration needs to be considered."},{"supportDocuments":[],"description":"This application note introduces the software examples, libraries, documentation, and software tools available for EFM32 and EFR32 Series 1. In addition to providing a basic introduction to the tools available for these devices, this document includes several basic firmware exercises to familiarize the reader with the Starter Kit hardware, the emlib firmware library, and the Simplicity Studio software tools. Note that this document focuses on the MCU portion of the devices. For wireless products (EFR32), see the additional wireless getting started information available in the user guide specifically for the product. More information on the hardware for any product can be found in the kit user guide. More information about Simplicity Studio in general can be found in AN0822: Simplicity Studio User Guide.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0009.1-efr32-efm32-series-1-getting-started.pdf","text":"AN0009.1: Getting Started with EFM32 and EFR32 Series 1","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note introduces the software examples, libraries, documentation, and software tools available for EFM32 and EFR32 Series 1. In addition to providing a basic introduction to the tools available for these devices, this document includes several basic firmware exercises to familiarize the reader with the Starter Kit hardware, the emlib firmware library, and the Simplicity Studio software tools. Note that this document focuses on the MCU portion of the devices. For wireless products (EFR32), see the additional wireless getting started information available in the user guide specifically for the product. More information on the hardware for any product can be found in the kit user guide. More information about Simplicity Studio in general can be found in AN0822: Simplicity Studio User Guide."},{"supportDocuments":[],"description":"This document describes the use of the CRYPTO acceleration module of the EFM32 Gemstones, including support for ECC, SHA, AES block ciphers, and authenticated encryption algorithms. This document focuses on the Silicon Labs mbedTLS library functions that support the CRYPTO module, how the library works, and how to integrate the library into an application. This document assumes familiarity with the crypto algorithms discussed. See the device Reference Manual for more information on the CRYPTO module hardware.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0955.pdf","text":"AN0955: CRYPTO","priority":9999999,"category":"APP_NOTES","toolTipText":"This document describes the use of the CRYPTO acceleration module of the EFM32 Gemstones, including support for ECC, SHA, AES block ciphers, and authenticated encryption algorithms. This document focuses on the Silicon Labs mbedTLS library functions that support the CRYPTO module, how the library works, and how to integrate the library into an application. This document assumes familiarity with the crypto algorithms discussed. See the device Reference Manual for more information on the CRYPTO module hardware."},{"supportDocuments":[],"description":"This application note describes the fixed point implementation of the Helix MP3 decoder on EFM32PG12 and EFM32GG11 devices. The MP3 data can be read from external Micro SD card or internal flash. The internal 12-bit VDAC or external 16-bit I2S codec is used for MP3 decoded audio output. KEY FEATURES  Supports MPEG-1 layer 3, MPEG-2 layer 3 and MPEG-2.5 layer 3.  Supports bitrate up to 320 Kbps. Supports mono and stereo modes. This application note includes:  This PDF document Source files Multiple IDE projects TFT LCD on STK  GPIO &amp; SPI MP3 Decoder (EFM32PG12/ EFM32GG11 STK) External Micro  SD Card SPI Internal Flash I2S External I2S Codec Internal VDAC","id":"asset://aem/www.silabs.com/documents/public/application-notes/an1112-efm32-helix-mp3-decoder.pdf","text":"AN1112: Helix MP3 Decoder on Series 1 EFM32 MCU Devices","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes the fixed point implementation of the Helix MP3 decoder on EFM32PG12 and EFM32GG11 devices. The MP3 data can be read from external Micro SD card or internal flash. The internal 12-bit VDAC or external 16-bit I2S codec is used for MP3 decoded audio output. KEY FEATURES  Supports MPEG-1 layer 3, MPEG-2 layer 3 and MPEG-2.5 layer 3.  Supports bitrate up to 320 Kbps. Supports mono and stereo modes. This application note includes:  This PDF document Source files Multiple IDE projects TFT LCD on STK  GPIO &amp; SPI MP3 Decoder (EFM32PG12/ EFM32GG11 STK) External Micro  SD Card SPI Internal Flash I2S External I2S Codec Internal VDAC"},{"supportDocuments":[],"description":"This application note describes a standalone programmer to program the internal flash and user page of EFM32 Gecko, Series 0 and 1, EZR32 Series 0, and EFR32 Wireless Gecko Series 1 devices that use the Serial Wire Debug (SWD) interface. Details on how to use the SWD interface to program device can be found in AN0062: Programming Internal Flash over the Serial Wire Debug Interface. This document focuses on how to optimize the process when programming the devices. The objectives of a standalone programmer are low cost, easy to build, simple to use and no PC connection is required. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko, and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN1011-efm32-standalone-programmer.pdf","text":"AN1011: Standalone Programmer via the SWD Interface","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes a standalone programmer to program the internal flash and user page of EFM32 Gecko, Series 0 and 1, EZR32 Series 0, and EFR32 Wireless Gecko Series 1 devices that use the Serial Wire Debug (SWD) interface. Details on how to use the SWD interface to program device can be found in AN0062: Programming Internal Flash over the Serial Wire Debug Interface. This document focuses on how to optimize the process when programming the devices. The objectives of a standalone programmer are low cost, easy to build, simple to use and no PC connection is required. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko, and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1."},{"supportDocuments":[],"description":"This application note describes how to use the Analog to Digital Converter (ADC) of EFM32 Gecko Series 0 and 1 devices to convert an analog input voltage to a digital value. Many aspects of the ADC, including inputs, references, and the different operating modes are described. Calibration routines for offset and gain are also included. The provided software examples show how to use the different operating modes of the ADC. The example projects are configured for the EFM32 Gecko Series 0 and 1 devices, but can easily be ported to other EZR32 Wireless MCU and EFR32 Wireless Gecko devices by changing the project settings. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko, and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0021.pdf","text":"AN0021: Analog to Digital Converter","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to use the Analog to Digital Converter (ADC) of EFM32 Gecko Series 0 and 1 devices to convert an analog input voltage to a digital value. Many aspects of the ADC, including inputs, references, and the different operating modes are described. Calibration routines for offset and gain are also included. The provided software examples show how to use the different operating modes of the ADC. The example projects are configured for the EFM32 Gecko Series 0 and 1 devices, but can easily be ported to other EZR32 Wireless MCU and EFR32 Wireless Gecko devices by changing the project settings. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko, and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1."},{"supportDocuments":[],"description":"This application note describes how to connect the EFM32 Tiny Gecko microcontroller with a smart phone using the audio jack interface of the phone. It demonstrates how the EFM32 can communicate and harvest power from the phone. This enables advanced smart phone accessories that does not require batteries.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0054.pdf","text":"AN0054: Connect the EFM32 with a Smart Phone through the Audio Jack","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to connect the EFM32 Tiny Gecko microcontroller with a smart phone using the audio jack interface of the phone. It demonstrates how the EFM32 can communicate and harvest power from the phone. This enables advanced smart phone accessories that does not require batteries."},{"supportDocuments":[],"description":"Description of Peripheral Reflex Systems and how their features can help improve a system\u2019s energy performance and reduce MCU workload and latency.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0025-efm32-prs.pdf","text":"AN0025: Peripheral Reflex System (PRS)","priority":9999999,"category":"APP_NOTES","toolTipText":"Description of Peripheral Reflex Systems and how their features can help improve a system\u2019s energy performance and reduce MCU workload and latency."},{"supportDocuments":[],"description":"This application note is an introduction to interrupts and wake-up handling in the EFM32. It includes ways to optimize for low latency wake-up, interrupt prioritization and energy saving operation.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0039.pdf","text":"AN0039: Interrupt Handling","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note is an introduction to interrupts and wake-up handling in the EFM32. It includes ways to optimize for low latency wake-up, interrupt prioritization and energy saving operation."},{"supportDocuments":[],"description":"This application note describes how to configure the EFM32 UART or USART to operate in asynchronous mode.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0045.pdf","text":"AN0045: USART/UART - Asynchronous Mode","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to configure the EFM32 UART or USART to operate in asynchronous mode."},{"supportDocuments":[],"description":"This application note describes how to use the EFM32 USART in synchronous (SPI) mode.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0008.pdf","text":"AN0008: USART - Synchronous Mode (SPI)","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to use the EFM32 USART in synchronous (SPI) mode."},{"supportDocuments":[],"description":"This application note implements an embedded http web server on the EFM32. The ethernet PHY is implement with an Asix AX88796C Ethernet Controller.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0032.pdf","text":"AN0032: Ethernet","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note implements an embedded http web server on the EFM32. The ethernet PHY is implement with an Asix AX88796C Ethernet Controller."},{"supportDocuments":[],"description":"This application note describes how to use the EFM32 Current Digital to Analog Converter (IDAC), a peripheral that can source or sink a configurable constant current.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0064.pdf","text":"AN0064: Current Digital to Analog Converter","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to use the EFM32 Current Digital to Analog Converter (IDAC), a peripheral that can source or sink a configurable constant current."},{"supportDocuments":[],"description":"This application note provides an overview of the CMU module for EFM32 and EFR32 Wireless Gecko Series 1 devices with explanations on how to choose clock sources, prescaling, and clock calibration. It also contains information about how to handle oscillators on wake up, external clock sources, and RC oscillator calibration.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0004.1-efm32-cmu.pdf","text":"AN0004.1: EFM32 Series 1 and EFR32 Wireless MCU Clock Management Unit (CMU)","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note provides an overview of the CMU module for EFM32 and EFR32 Wireless Gecko Series 1 devices with explanations on how to choose clock sources, prescaling, and clock calibration. It also contains information about how to handle oscillators on wake up, external clock sources, and RC oscillator calibration."},{"supportDocuments":[],"description":"This application note supports multiple device families, and some functionality is different depending on the device. AN0014: EFM32 Timers Device Compatibility","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0014.pdf","text":"AN0014: EFM32 Timers","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note supports multiple device families, and some functionality is different depending on the device. AN0014: EFM32 Timers Device Compatibility"},{"supportDocuments":[],"description":"This porting guide is targeted at migrating an existing design from MCU Series 0 to EFM32JGxx/PGxx or Wireless SoC Series 1. Both hardware and software migration needs to be considered.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0918.0-efm32_to_efm32jgpg_migration_guide.pdf","text":"AN0918.0: MCU Series 0 to EFM32JGxx/PGxx Compatibility and Migration Guide","priority":9999999,"category":"APP_NOTES","toolTipText":"This porting guide is targeted at migrating an existing design from MCU Series 0 to EFM32JGxx/PGxx or Wireless SoC Series 1. Both hardware and software migration needs to be considered."},{"supportDocuments":[],"description":"This application note describes strategies to reduce current consumption as well as how to enter different energy modes. Additionally, the prime number calculation code used in current consumption benchmarking is included. This application note includes: This PDF document Source files (zip)  Example c-code Multiple IDE projects","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0007.1-efr32-efm32-series-1-energymodes.pdf","text":"AN0007.1: MCU and Wireless SoC Series 1 Energy Modes","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes strategies to reduce current consumption as well as how to enter different energy modes. Additionally, the prime number calculation code used in current consumption benchmarking is included. This application note includes: This PDF document Source files (zip)  Example c-code Multiple IDE projects"},{"supportDocuments":[],"description":"This application note gives an overview of the Low Energy Timer (LETIMER) and demonstrates how to use it on the EFM32 and EFR32 wireless SOC Series 1 devices. For LETIMER information of EFM32 and EZR32 Wireless MCU Series 0 devices, refer to AN0026.0: EFM32 and EZR32 wireless MCU Series 0 Low Energy Timer. This document discusses initializing the LETIMER, a basic setup for operation, and ways to utilize the added LETIMER functionality in more advanced applications.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0026.1-series-1-efm32-letimer.pdf","text":"AN0026.1: EFM32 and EZR32 Wireless MCU Series 1 Low Energy Timer","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note gives an overview of the Low Energy Timer (LETIMER) and demonstrates how to use it on the EFM32 and EFR32 wireless SOC Series 1 devices. For LETIMER information of EFM32 and EZR32 Wireless MCU Series 0 devices, refer to AN0026.0: EFM32 and EZR32 wireless MCU Series 0 Low Energy Timer. This document discusses initializing the LETIMER, a basic setup for operation, and ways to utilize the added LETIMER functionality in more advanced applications."},{"supportDocuments":[],"description":"This application note shows how to perform Digital Signal Processing (DSP) on the EFM32 using the DSP library provided with CMSIS in Simplicity Studio. The differences between the ARM Cortex-M3 and Cortex-M4F cores are considered.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0051.pdf","text":"AN0051: Digital Signal Processing with EFM32","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note shows how to perform Digital Signal Processing (DSP) on the EFM32 using the DSP library provided with CMSIS in Simplicity Studio. The differences between the ARM Cortex-M3 and Cortex-M4F cores are considered."},{"supportDocuments":[],"description":"This application note demonstrates how to use the linked direct memory access (LDMA) controller in the EFM32 Gecko Series 1 and EFR32 Wireless Gecko Series 1 devices. Several software examples are provided that shows how to use the various transfer modes of the LDMA. The example projects are configured for the EFM32 Pearl Gecko, but can easily be ported to other EFR32 Wireless Gecko devices by changing the project settings. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN1029-efm32-ldma.pdf","text":"AN1029: Linked Direct Memory Access (LDMA) Controller","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note demonstrates how to use the linked direct memory access (LDMA) controller in the EFM32 Gecko Series 1 and EFR32 Wireless Gecko Series 1 devices. Several software examples are provided that shows how to use the various transfer modes of the LDMA. The example projects are configured for the EFM32 Pearl Gecko, but can easily be ported to other EFR32 Wireless Gecko devices by changing the project settings. For simplicity, EFM32 Wonder Gecko, Gecko, Giant Gecko, Leopard Gecko, Tiny Gecko, Zero Gecko, and Happy Gecko are a part of the EFM32 Gecko Series 0. EZR32 Wonder Gecko, Leopard Gecko, and Happy Gecko are a part of the EZR32 Wireless MCU Series 0. EFM32 Pearl Gecko and Jade Gecko (and future devices) are a part of the EFM32 Gecko Series 1. EFR32 Blue Gecko, Flex Gecko and Mighty Gecko are a part of the EFR32 Wireless Gecko Series 1."},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/brochures/efm32-selector-guide.pdf","text":"EFM32 MCU Selector Guide","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"This application note will demonstrate how to use the EFM32 EMU's Voltage Monitor monitor the supply voltage and the Reset Management Unit to determine if a brown-out reset has occurred.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0018.1-efr32-efm32-series-1-supply-voltage-monitoring.pdf","text":"AN0018.1: Supply Voltage Monitoring","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note will demonstrate how to use the EFM32 EMU's Voltage Monitor monitor the supply voltage and the Reset Management Unit to determine if a brown-out reset has occurred."},{"supportDocuments":[],"description":"This application note describes usage of the EFM32 general-purpose input/output (GPIO) subsystem. This document discusses configuration, read and writing pin values, peripheral function routing, external interrupt capability, and use of GPIO pins as producers for the Peripheral Reflex System (PRS). Example projects that illustrate these concepts can be run on the Starter Kit boards for many different EFM32 derivatives. This application note includes: This PDF document Source files (zip)  Example C source code Multiple IDE projects","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0012-efm32-gpio.pdf","text":"AN0012: General Purpose Input Output","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes usage of the EFM32 general-purpose input/output (GPIO) subsystem. This document discusses configuration, read and writing pin values, peripheral function routing, external interrupt capability, and use of GPIO pins as producers for the Peripheral Reflex System (PRS). Example projects that illustrate these concepts can be run on the Starter Kit boards for many different EFM32 derivatives. This application note includes: This PDF document Source files (zip)  Example C source code Multiple IDE projects"},{"supportDocuments":[],"description":"This application note describes the implementation of a bootloader capable of accepting AES-encrypted firmware updates. The full source code for a bootloader as well as a tool for encrypting firmware images on a PC are included. This application note discusses implementations for EFM32GG and EFM32HG Series 0 Gecko MCU devices. For more information on the CRYPTO module included on Series 1 EFM32 and EFR32 devices, see AN0955: CRYPTO.","id":"asset://aem/www.silabs.com/documents/public/application-notes/an0060-bootloader-with-aes-encryption.pdf","text":"AN0060: Bootloader with AES Encryption","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes the implementation of a bootloader capable of accepting AES-encrypted firmware updates. The full source code for a bootloader as well as a tool for encrypting firmware images on a PC are included. This application note discusses implementations for EFM32GG and EFM32HG Series 0 Gecko MCU devices. For more information on the CRYPTO module included on Series 1 EFM32 and EFR32 devices, see AN0955: CRYPTO."},{"supportDocuments":[],"description":"This application note covers the basic theory of monitoring infrared (IR) photo sensors with EFM32 microcontrollers. It describes how to set up the Low Energy Sensor Interface (LESENSE) and create a circuit both for photo interruption and proximity detection while remaining in EM2, achieving current consumption around 5 A.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0053.pdf","text":"AN0053: IR Sensor Monitoring Using LESENSE","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note covers the basic theory of monitoring infrared (IR) photo sensors with EFM32 microcontrollers. It describes how to set up the Low Energy Sensor Interface (LESENSE) and create a circuit both for photo interruption and proximity detection while remaining in EM2, achieving current consumption around 5 A."},{"supportDocuments":[],"description":"This application note shows how the EFM32 can be used to create an application that requires a high resolution graphical display, yet still maintains a low power consumption.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0048.pdf","text":"AN0048: Energy Optimized Display Application","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note shows how the EFM32 can be used to create an application that requires a high resolution graphical display, yet still maintains a low power consumption."},{"supportDocuments":[],"description":"This application note describes how to use the EFM32 Digital to Analog Converter. The features of the Digital to Analog Converter are described, and the software examples include both a signal generator and audio playback using Direct Memory Access.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0022.pdf","text":"AN0022: Digital to Analog Converter","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to use the EFM32 Digital to Analog Converter. The features of the Digital to Analog Converter are described, and the software examples include both a signal generator and audio playback using Direct Memory Access."},{"supportDocuments":[],"description":"This application note describes how to configure and use the different modes in the EFM32 Pulse Counter, select clock sources and use the available interrupts to achieve high energy efficiency.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0024.pdf","text":"AN0024: Pulse Counter","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to configure and use the different modes in the EFM32 Pulse Counter, select clock sources and use the available interrupts to achieve high energy efficiency."},{"supportDocuments":[],"description":"This application note describes how to use the EFM32 Analog Comparator Module to compare the voltage of two analog inputs, trigger interrupts or use two comparators for window mode.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0020.pdf","text":"AN0020: Analog Comparator","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes how to use the EFM32 Analog Comparator Module to compare the voltage of two analog inputs, trigger interrupts or use two comparators for window mode."},{"supportDocuments":[],"description":"This application note demonstrates how to use the Low Energy UART (LEUART) module on the EFM32 microcontrollers. The LEUART is able to run full UART communication even when the device is in deep sleep mode EM2. Together with intelligent interrupt functions and flexible DMA integration, this enables simple and energy friendly communication.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0017.pdf","text":"AN0017: Low Energy UART","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note demonstrates how to use the Low Energy UART (LEUART) module on the EFM32 microcontrollers. The LEUART is able to run full UART communication even when the device is in deep sleep mode EM2. Together with intelligent interrupt functions and flexible DMA integration, this enables simple and energy friendly communication."},{"supportDocuments":[],"description":"This application note demonstrates how to use the Direct Memory Access (DMA) in the EFM32. Several software examples are provided that shows how to use the DMA with the ADC, UART, SPI etc. using the various transfer modes of the DMA. The example projects are configured for the EFM32G890F128, but can easily be ported to other EFM32 devices by changing the project settings.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0013.pdf","text":"AN0013: Direct Memory Access","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note demonstrates how to use the Direct Memory Access (DMA) in the EFM32. Several software examples are provided that shows how to use the DMA with the ADC, UART, SPI etc. using the various transfer modes of the DMA. The example projects are configured for the EFM32G890F128, but can easily be ported to other EFM32 devices by changing the project settings."},{"supportDocuments":[],"description":"This application note describes the RTC, RTCC and the Backup RTC (BURTC). The software examples include how to use the RTC, RTCC and the BURTC to wake up from Energy Mode 2 (EM2). The software examples focus on generating periodic event with real time counters and timekeeping with real time counter and calendar.","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN0005-EFM32-RTC.pdf","text":"AN0005: Real Time Counters","priority":9999999,"category":"APP_NOTES","toolTipText":"This application note describes the RTC, RTCC and the Backup RTC (BURTC). The software examples include how to use the RTC, RTCC and the BURTC to wake up from Energy Mode 2 (EM2). The software examples focus on generating periodic event with real time counters and timekeeping with real time counter and calendar."},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/miscellaneous/um007-energy-optimization.pdf","text":"UM007: Lesson 7 - EFM32 Energy Optimization","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/application-notes/AN136-production-programming-options.pdf","text":"AN136: Silicon Labs Production Programming Options","priority":9999999,"category":"APP_NOTES","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/arm_cortex_m3_and_m4_mcu_architecture.pdf","text":"ARM Cortex-M3 & M4 MCU Architecture","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/Low-Power-Design-Basics.pdf","text":"Low Power Design Basics: How to Choose the Optimal Low Power MCU for Your Embedded System White Paper","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/user-guides/ug257-stk3402-usersguide.pdf","text":"UG257: EFM32 Pearl Gecko PG12 Starter Kit User's Guide","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/how-to-overcome-technical-hurdles-during-microcontroller-development.pdf","text":"How to Overcome Technical Hurdles During Microcontroller Development","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/selecting-a-32-bit-microcontroller-wp.pdf","text":"Selecting a 32-bit Microcontroller","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"},{"supportDocuments":[],"description":"Description is unavailable","id":"asset://aem/www.silabs.com/documents/public/white-papers/Chip-Scale-Packages-Wearables-Technology.pdf","text":"Chip Scale Packages Wearables Technology","priority":9999999,"category":"DOCUMENTATION","toolTipText":"Description is unavailable"}],"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[{"futureCount":46,"anySelected":false,"id":0,"filters":[],"title":"Application Notes","parentId":0,"selected":false},{"futureCount":1,"anySelected":false,"id":1,"filters":[],"title":"Data Sheets","parentId":0,"selected":false},{"futureCount":1,"anySelected":false,"id":2,"filters":[],"title":"Errata","parentId":0,"selected":false},{"futureCount":1,"anySelected":false,"id":3,"filters":[],"title":"Reference Manuals","parentId":0,"selected":false},{"futureCount":2,"anySelected":false,"id":4,"filters":[],"title":"Schematic and Layout Files","parentId":0,"selected":false},{"futureCount":6,"anySelected":false,"id":5,"filters":[],"title":"User's Guides","parentId":0,"selected":false},{"futureCount":15,"anySelected":false,"id":6,"filters":[],"title":"White Papers","parentId":0,"selected":false}],"title":"Resource Type","parentId":-1,"selected":false},{"futureCount":0,"anySelected":false,"id":1,"filters":[{"futureCount":1,"anySelected":false,"id":0,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"silicon-labs-software:software-development-kits/bluetooth-sdk","parentId":0,"selected":true}],"title":"Bluetooth","parentId":1,"selected":false},{"futureCount":1,"anySelected":false,"id":1,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.stack.bootloader:2.1.0._589083835","parentId":1,"selected":true}],"title":"Bootloader","parentId":1,"selected":false},{"futureCount":5,"anySelected":false,"id":2,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.micrium:5.13.10._-1461775567","parentId":2,"selected":true},{"futureCount":0,"anySelected":false,"id":1,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.micrium:5.13.10._-1461775567","parentId":2,"selected":true},{"futureCount":0,"anySelected":false,"id":2,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.micrium:5.13.10._-1461775567","parentId":2,"selected":true},{"futureCount":0,"anySelected":false,"id":3,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.micrium:5.13.10._-1461775567","parentId":2,"selected":true},{"futureCount":0,"anySelected":false,"id":4,"filters":[],"title":"com.silabs.sdk.stack.super:4.1.1._1615500696.com.silabs.sdk.micrium:5.13.10._-1461775567","parentId":2,"selected":true}],"title":"Operating Systems","parentId":1,"selected":false},{"futureCount":4,"anySelected":false,"id":3,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"silicon-labs-software:software-development-kits/connect-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":1,"filters":[],"title":"silicon-labs-software:software-development-kits/connect-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":2,"filters":[],"title":"silicon-labs-software:software-development-kits/flex-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":3,"filters":[],"title":"silicon-labs-software:software-development-kits/rail-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":4,"filters":[],"title":"silicon-labs-software:software-development-kits/connect-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":5,"filters":[],"title":"silicon-labs-software:software-development-kits/connect-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":6,"filters":[],"title":"silicon-labs-software:software-development-kits/flex-sdk","parentId":3,"selected":true},{"futureCount":0,"anySelected":false,"id":7,"filters":[],"title":"silicon-labs-software:software-development-kits/rail-sdk","parentId":3,"selected":true}],"title":"Proprietary","parentId":1,"selected":false},{"futureCount":1,"anySelected":false,"id":4,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"silicon-labs-software:software-development-kits/thread-sdk","parentId":4,"selected":true}],"title":"Thread","parentId":1,"selected":false},{"futureCount":2,"anySelected":false,"id":5,"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[],"title":"silicon-labs-software:software-development-kits/zigbee-sdk","parentId":5,"selected":true},{"futureCount":0,"anySelected":false,"id":1,"filters":[],"title":"silicon-labs-software:software-development-kits/zigbee-sdk","parentId":5,"selected":true}],"title":"Zigbee","parentId":1,"selected":false}],"title":"Technology Type","parentId":-1,"selected":false}],"totalCount":79}
